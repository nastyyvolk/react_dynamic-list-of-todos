{"version":3,"sources":["components/TodoList/TodoList.tsx","api.js","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["TodoList","state","query","filterByStatus","handleChange","event","target","name","value","setState","filterTasks","todos","visibleTasks","filter","todo","title","toLowerCase","includes","completed","this","props","onComplete","selectUser","selectedUser","className","htmlFor","id","onChange","map","classNames","type","readOnly","checked","userId","onClick","React","Component","request","url","fetch","then","response","ok","json","Promise","reject","Error","getUser","CurrentUser","user","loadingError","catch","prevProps","email","phone","App","selectedUserId","completeTask","currentState","error","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5cdde6cd.chunk.js","sourcesContent":["import React from 'react';\nimport './TodoList.scss';\nimport classNames from 'classnames';\n\ntype Props = {\n  selectUser: (userId: number) => void;\n  todos: Todo[];\n  onComplete: (id: number) => void;\n  selectedUser: number;\n};\n\ntype State = {\n  query: string;\n  filterByStatus: string;\n};\n\nexport class TodoList extends React.Component<Props, State> {\n  state: State = {\n    query: '',\n    filterByStatus: '',\n  };\n\n  handleChange = (event: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {\n    const { name, value } = event.target;\n\n    this.setState({ [name]: value } as Pick<State, keyof State>);\n  };\n\n  filterTasks = (todos: Todo[]) => {\n    const { query, filterByStatus } = this.state;\n\n    let visibleTasks = [...todos].filter(todo => {\n      if (todo.title) {\n        return todo.title.toLowerCase().includes(query.toLowerCase());\n      }\n\n      return false;\n    });\n\n    if (filterByStatus === 'active') {\n      visibleTasks = visibleTasks.filter(todo => !todo.completed);\n    } else if (filterByStatus === 'completed') {\n      visibleTasks = visibleTasks.filter(todo => todo.completed);\n    }\n\n    return visibleTasks;\n  };\n\n  render() {\n    const {\n      todos,\n      onComplete,\n      selectUser,\n      selectedUser,\n    } = this.props;\n    const { query, filterByStatus } = this.state;\n    const visibleTasks = this.filterTasks(todos);\n\n    return (\n      <div className=\"TodoList\">\n        <h2>Todos:</h2>\n        <div className=\"form-field\">\n          <label htmlFor=\"query\">\n            Search todos:\n          </label>\n          <input\n            name=\"query\"\n            id=\"query\"\n            value={query}\n            onChange={this.handleChange}\n          />\n\n          <label htmlFor=\"filterByStatus\">Show: </label>\n          <select\n            name=\"filterByStatus\"\n            id=\"filterByStatus\"\n            onChange={this.handleChange}\n            value={filterByStatus}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </div>\n\n        <div className=\"TodoList__list-container\">\n          <ul className=\"TodoList__list\">\n            {\n              visibleTasks.map(todo => (\n                <li\n                  className={classNames('TodoList__item', {\n                    'TodoList__item--unchecked': !todo.completed,\n                    'TodoList__item--checked': todo.completed,\n                  })}\n                  key={todo.id}\n                >\n                  <label>\n                    <input\n                      type=\"checkbox\"\n                      readOnly\n                      checked={todo.completed}\n                      onChange={() => onComplete(todo.id)}\n                    />\n                    <p>{todo.title}</p>\n                  </label>\n\n                  <button\n                    className={classNames('TodoList__user-button', 'button', {\n                      'TodoList__user-button--selected': selectedUser === todo.userId,\n                    })}\n                    type=\"button\"\n                    onClick={() => {\n                      selectUser(todo.userId);\n                    }}\n                  >\n                    User&nbsp;#\n                    {todo.userId}\n                  </button>\n                </li>\n              ))\n            }\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n","const BASE_URL = 'https://mate.academy/students-api';\n\nconst request = (url) => {\n  return fetch(`${BASE_URL}${url}`)\n    .then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n\n      return Promise.reject(new Error());\n    });\n};\n\nexport const getTodos = () => request('/todos');\nexport const getUser = (id) => request(`/users/${id}`);\n","import React from 'react';\nimport './CurrentUser.scss';\nimport { getUser } from '../../api';\n\ntype Props = {\n  userId: number;\n  selectUser: (id: number) => void;\n};\n\ntype State = {\n  user: User | null;\n  loadingError: boolean;\n};\n\nexport class CurrentUser extends React.Component<Props, State> {\n  state: State = {\n    user: null,\n    loadingError: false,\n  };\n\n  componentDidMount() {\n    this.getUser();\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (prevProps.userId !== this.props.userId) {\n      this.getUser();\n    }\n  }\n\n  getUser = () => {\n    getUser(this.props.userId)\n      .then(user => {\n        this.setState({ user, loadingError: false });\n      })\n      .catch(() => {\n        this.setState({ loadingError: true });\n        // throw new Error(`Fetching user: ${error}`);\n      });\n  };\n\n  render() {\n    const { user, loadingError } = this.state;\n    const { selectUser } = this.props;\n\n    return (\n      <div className=\"CurrentUser\">\n        {loadingError && (<p> No such a user in the database </p>)}\n        { user && !loadingError && (\n          <>\n            <h2 className=\"CurrentUser__title\">\n              {'Selected user: '}\n              {user.id}\n            </h2>\n            <h3 className=\"CurrentUser__name\">{user.name}</h3>\n            <p className=\"CurrentUser__email\">{user.email}</p>\n            <p className=\"CurrentUser__phone\">{user.phone}</p>\n            <button\n              className=\"TodoList__user-button TodoList__user-button--selected button\"\n              type=\"button\"\n              onClick={() => selectUser(0)}\n            >\n              Clear\n            </button>\n          </>\n        )}\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodos } from './api';\n\ninterface State {\n  selectedUserId: number;\n  todos: Todo[];\n  loadingError: boolean;\n}\n\nclass App extends React.Component<{}, State> {\n  state: State = {\n    selectedUserId: 0,\n    todos: [],\n    loadingError: false,\n  };\n\n  componentDidMount() {\n    getTodos()\n      .then(todos => {\n        this.setState({ todos });\n      })\n      .catch((error) => {\n        this.setState({ loadingError: true });\n        throw new Error(`Fetching todos: ${error}`);\n      });\n  }\n\n  selectUser = (userId: number) => {\n    this.setState({ selectedUserId: userId, loadingError: false });\n  };\n\n  completeTask = (id: number) => {\n    this.setState(currentState => (\n      {\n        todos: currentState.todos.map(todo => {\n          if (todo.id === id) {\n            return {\n              ...todo,\n              completed: true,\n            };\n          }\n\n          return todo;\n        }),\n      }\n    ));\n  };\n\n  render() {\n    const { selectedUserId, todos, loadingError } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          {loadingError ? (\n            <p>Loading error. Please, try again...</p>\n          ) : (\n            <TodoList\n              selectUser={this.selectUser}\n              todos={todos}\n              onComplete={this.completeTask}\n              selectedUser={selectedUserId}\n            />\n          )}\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                userId={selectedUserId}\n                selectUser={this.selectUser}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}